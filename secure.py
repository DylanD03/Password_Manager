from cryptography.fernet import Fernet
import hashlib

def hash_password(password):
	"""
	Description : Returns a hash from a string using sha256

	Arguments :
		password ( string ) : User Input. Password to a particular website. 

	Returns :
		hashed_password ( string) : the hash of the password
	"""

	encoded_password = password.encode()
	hashed_password = hashlib.sha256(encoded_password)
	hashed_password = hashed_password.hexdigest() # from a sha256 object to hexadecimal, so it can be stored as a BLOB in database

	return hashed_password



def generate_key():
	"""
	Description : generates a key to decrypt/encrypt passwords
	"""

	key = Fernet.generate_key()
	return key



def encrypt_password(password, key):
	"""
	Description:
		Encrypts data passed into the function. 

	Arguments : 
		password (string) : The data to be encrypted
		key (string) : Key generated by the generate_key() method
	
	Returns :
		encrypted_password (bytes) : A secure password that cannot be 
									 read/altered without the key

	"""
	fernet = Fernet(key)
	encoded_password = password.encode()
	encrypted_password = fernet.encrypt(encoded_password)

	return encrypted_password



def decrypt_password(encrypted_password, key):
	"""
	Description:
		Decrypts data passed into the function. 

	Arguments : 
		password (string) : A secure password that cannot be 
							read/altered without the key

		key (string) : Key that was used to initally encrypt the password
	
	Returns :
		password (string) : password in a human readable string

	"""

	fernet = Fernet(key)
	encoded_password = fernet.decrypt(encrypted_password)
	password = encoded_password.decode()

	return password




